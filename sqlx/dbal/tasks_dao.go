package dbal

// Code generated by a tool. DO NOT EDIT.
// Additional custom methods can be implemented in a separate file like <this_file>_ex.go.
// https://sqldalmaker.sourceforge.net/

import (
	"context"
	"sdm_demo_todolist/sqlx/dbal/dto"
)

type TasksDao struct {
	ds DataStore
}

// (C)RUD: tasks
// Generated/AI values are passed to DTO/model.

func (dao *TasksDao) CreateTask(ctx context.Context, item *dto.Task) error {
	sql := `insert into tasks (p_id, t_priority, t_date, t_subject, t_comments) values (?, ?, ?, ?, ?)`
	row, err := dao.ds.Insert(ctx, sql, "t_id", item.PId, item.TPriority, item.TDate, item.TSubject, item.TComments)
	if err == nil {
		err = SetRes(&item.TId, row)
	}
	return err
}

// C(R)UD: tasks

func (dao *TasksDao) ReadTaskList(ctx context.Context) (res []*dto.Task, err error) {
	sql := `select * from tasks`
	err = dao.ds.Select(ctx, sql, &res)
	return
}

// C(R)UD: tasks

func (dao *TasksDao) ReadTask(ctx context.Context, tId int64) (*dto.Task, error) {
	sql := `select * from tasks where t_id=?`
	res := &dto.Task{}
	err := dao.ds.Select(ctx, sql, res, tId)
	if err == nil {
		return res, nil
	}
	return nil, err
}

// CR(U)D: tasks

func (dao *TasksDao) UpdateTask(ctx context.Context, item *dto.Task) (rowsAffected int64, err error) {
	sql := `update tasks set p_id=?, t_priority=?, t_date=?, t_subject=?, t_comments=? where t_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, item.PId, item.TPriority, item.TDate, item.TSubject, item.TComments, item.TId)
	return
}

// CRU(D): tasks

func (dao *TasksDao) DeleteTask(ctx context.Context, item *dto.Task) (rowsAffected int64, err error) {
	sql := `delete from tasks where t_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, item.TId)
	return
}

func (dao *TasksDao) GetGroupTasks(ctx context.Context, gId int64) (res []*dto.TaskLi, err error) {
	sql := `select t_id, t_priority, t_date, t_subject from tasks where p_id =? 
		order by t_id`
	err = dao.ds.Select(ctx, sql, &res, gId)
	return
}

func (dao *TasksDao) DeleteGroupTasks(ctx context.Context, gId string) (rowsAffected int64, err error) {
	sql := `delete from tasks where p_id=?`
	rowsAffected, err = dao.ds.Exec(ctx, sql, gId)
	return
}

func (dao *TasksDao) GetCount(ctx context.Context) (res int64, err error) {
	sql := `select count(*) from tasks`
	err = dao.ds.Query(ctx, sql, &res)
	return
}

func (dao *TasksDao) GetGroupTasks2(ctx context.Context, gId string) (res []*dto.TaskLi, err error) {
	sql := `delete from tasks where p_id=?`
	err = dao.ds.Select(ctx, sql, &res, gId)
	return
}
